# tasks/main.yml

- name: Getting system architecture
  ansible.builtin.command:
    cmd: dpkg --print-architecture
  register: system_architecture

- name: Setting dpkg_arch for x86_64
  ansible.builtin.set_fact:
    dpkg_arch: "amd64"
  when: system_architecture.stdout == "x86_64"

- name: Setting dpkg_arch for other architectures
  ansible.builtin.set_fact:
    dpkg_arch: "{{ system_architecture.stdout }}"
  when: system_architecture.stdout != "x86_64"
  
- name: Install unzip utility
  ansible.builtin.apt:
    name: unzip
    state: present
    update_cache: yes

- name: Create directory to store Loki binary and configuration file
  ansible.builtin.file:
    path: /opt/loki
    state: directory

- name: Download Loki binary from the official website
  ansible.builtin.get_url:
    url: "{{ loki_bin_url }}"
    dest: /opt/loki/loki.zip

- name: Extract Loki binary from archive
  ansible.builtin.unarchive:
    src: /opt/loki/loki.zip
    dest: /opt/loki
    remote_src: yes

- name: Set execute permission for Loki binary
  ansible.builtin.file:
    path: "{{ loki_bin_path }}"
    mode: '0755'
    state: file

- name: Create symbolic link for Loki command
  ansible.builtin.file:
    src: "{{ loki_bin_path }}"
    dest: /usr/local/bin/loki
    state: link

- name: Download configuration file for Loki
  ansible.builtin.get_url:
    url: "{{ loki_config_url }}"
    dest: "{{ loki_config_path }}"

- name: Verify Loki installation
  ansible.builtin.command: loki --version
  register: loki_version_output
  failed_when: loki_version_output.rc != 0

- name: Create systemd unit file for Loki
  ansible.builtin.template:
    src: loki.service.j2
    dest: "{{ loki_service_file }}"

- name: Reload systemd to read new unit file
  ansible.builtin.systemd:
    daemon_reload: yes

- name: Start Loki service
  ansible.builtin.systemd:
    name: loki
    state: started
    enabled: yes

- name: Ensure Loki service is running
  ansible.builtin.systemd:
    name: loki
    state: started
